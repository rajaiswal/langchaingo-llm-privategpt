// Code generated by ogen, DO NOT EDIT.

package privategptclient

import (
	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/components/schemas/Body_ingest_file_v1_ingest_file_post
type BodyIngestFileV1IngestFilePostMultipart struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *BodyIngestFileV1IngestFilePostMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *BodyIngestFileV1IngestFilePostMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/Body_ingest_v1_ingest_post
type BodyIngestV1IngestPostMultipart struct {
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *BodyIngestV1IngestPostMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *BodyIngestV1IngestPostMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// Ref: #/components/schemas/ChatBody
type ChatBody struct {
	Messages       []OpenAIMessage          `json:"messages"`
	UseContext     OptBool                  `json:"use_context"`
	ContextFilter  OptChatBodyContextFilter `json:"context_filter"`
	IncludeSources OptBool                  `json:"include_sources"`
	Stream         OptBool                  `json:"stream"`
}

// GetMessages returns the value of Messages.
func (s *ChatBody) GetMessages() []OpenAIMessage {
	return s.Messages
}

// GetUseContext returns the value of UseContext.
func (s *ChatBody) GetUseContext() OptBool {
	return s.UseContext
}

// GetContextFilter returns the value of ContextFilter.
func (s *ChatBody) GetContextFilter() OptChatBodyContextFilter {
	return s.ContextFilter
}

// GetIncludeSources returns the value of IncludeSources.
func (s *ChatBody) GetIncludeSources() OptBool {
	return s.IncludeSources
}

// GetStream returns the value of Stream.
func (s *ChatBody) GetStream() OptBool {
	return s.Stream
}

// SetMessages sets the value of Messages.
func (s *ChatBody) SetMessages(val []OpenAIMessage) {
	s.Messages = val
}

// SetUseContext sets the value of UseContext.
func (s *ChatBody) SetUseContext(val OptBool) {
	s.UseContext = val
}

// SetContextFilter sets the value of ContextFilter.
func (s *ChatBody) SetContextFilter(val OptChatBodyContextFilter) {
	s.ContextFilter = val
}

// SetIncludeSources sets the value of IncludeSources.
func (s *ChatBody) SetIncludeSources(val OptBool) {
	s.IncludeSources = val
}

// SetStream sets the value of Stream.
func (s *ChatBody) SetStream(val OptBool) {
	s.Stream = val
}

// ChatBodyContextFilter represents sum type.
type ChatBodyContextFilter struct {
	Type          ChatBodyContextFilterType // switch on this field
	ContextFilter ContextFilter
	Null          struct{}
}

// ChatBodyContextFilterType is oneOf type of ChatBodyContextFilter.
type ChatBodyContextFilterType string

// Possible values for ChatBodyContextFilterType.
const (
	ContextFilterChatBodyContextFilter ChatBodyContextFilterType = "ContextFilter"
	NullChatBodyContextFilter          ChatBodyContextFilterType = "struct{}"
)

// IsContextFilter reports whether ChatBodyContextFilter is ContextFilter.
func (s ChatBodyContextFilter) IsContextFilter() bool {
	return s.Type == ContextFilterChatBodyContextFilter
}

// IsNull reports whether ChatBodyContextFilter is struct{}.
func (s ChatBodyContextFilter) IsNull() bool { return s.Type == NullChatBodyContextFilter }

// SetContextFilter sets ChatBodyContextFilter to ContextFilter.
func (s *ChatBodyContextFilter) SetContextFilter(v ContextFilter) {
	s.Type = ContextFilterChatBodyContextFilter
	s.ContextFilter = v
}

// GetContextFilter returns ContextFilter and true boolean if ChatBodyContextFilter is ContextFilter.
func (s ChatBodyContextFilter) GetContextFilter() (v ContextFilter, ok bool) {
	if !s.IsContextFilter() {
		return v, false
	}
	return s.ContextFilter, true
}

// NewContextFilterChatBodyContextFilter returns new ChatBodyContextFilter from ContextFilter.
func NewContextFilterChatBodyContextFilter(v ContextFilter) ChatBodyContextFilter {
	var s ChatBodyContextFilter
	s.SetContextFilter(v)
	return s
}

// SetNull sets ChatBodyContextFilter to struct{}.
func (s *ChatBodyContextFilter) SetNull(v struct{}) {
	s.Type = NullChatBodyContextFilter
	s.Null = v
}

// GetNull returns struct{} and true boolean if ChatBodyContextFilter is struct{}.
func (s ChatBodyContextFilter) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullChatBodyContextFilter returns new ChatBodyContextFilter from struct{}.
func NewNullChatBodyContextFilter(v struct{}) ChatBodyContextFilter {
	var s ChatBodyContextFilter
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/Chunk
type Chunk struct {
	Object        jx.Raw                `json:"object"`
	Score         float64               `json:"score"`
	Document      IngestedDoc           `json:"document"`
	Text          string                `json:"text"`
	PreviousTexts OptChunkPreviousTexts `json:"previous_texts"`
	NextTexts     OptChunkNextTexts     `json:"next_texts"`
}

// GetObject returns the value of Object.
func (s *Chunk) GetObject() jx.Raw {
	return s.Object
}

// GetScore returns the value of Score.
func (s *Chunk) GetScore() float64 {
	return s.Score
}

// GetDocument returns the value of Document.
func (s *Chunk) GetDocument() IngestedDoc {
	return s.Document
}

// GetText returns the value of Text.
func (s *Chunk) GetText() string {
	return s.Text
}

// GetPreviousTexts returns the value of PreviousTexts.
func (s *Chunk) GetPreviousTexts() OptChunkPreviousTexts {
	return s.PreviousTexts
}

// GetNextTexts returns the value of NextTexts.
func (s *Chunk) GetNextTexts() OptChunkNextTexts {
	return s.NextTexts
}

// SetObject sets the value of Object.
func (s *Chunk) SetObject(val jx.Raw) {
	s.Object = val
}

// SetScore sets the value of Score.
func (s *Chunk) SetScore(val float64) {
	s.Score = val
}

// SetDocument sets the value of Document.
func (s *Chunk) SetDocument(val IngestedDoc) {
	s.Document = val
}

// SetText sets the value of Text.
func (s *Chunk) SetText(val string) {
	s.Text = val
}

// SetPreviousTexts sets the value of PreviousTexts.
func (s *Chunk) SetPreviousTexts(val OptChunkPreviousTexts) {
	s.PreviousTexts = val
}

// SetNextTexts sets the value of NextTexts.
func (s *Chunk) SetNextTexts(val OptChunkNextTexts) {
	s.NextTexts = val
}

// ChunkNextTexts represents sum type.
type ChunkNextTexts struct {
	Type        ChunkNextTextsType // switch on this field
	StringArray []string
	Null        struct{}
}

// ChunkNextTextsType is oneOf type of ChunkNextTexts.
type ChunkNextTextsType string

// Possible values for ChunkNextTextsType.
const (
	StringArrayChunkNextTexts ChunkNextTextsType = "[]string"
	NullChunkNextTexts        ChunkNextTextsType = "struct{}"
)

// IsStringArray reports whether ChunkNextTexts is []string.
func (s ChunkNextTexts) IsStringArray() bool { return s.Type == StringArrayChunkNextTexts }

// IsNull reports whether ChunkNextTexts is struct{}.
func (s ChunkNextTexts) IsNull() bool { return s.Type == NullChunkNextTexts }

// SetStringArray sets ChunkNextTexts to []string.
func (s *ChunkNextTexts) SetStringArray(v []string) {
	s.Type = StringArrayChunkNextTexts
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ChunkNextTexts is []string.
func (s ChunkNextTexts) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayChunkNextTexts returns new ChunkNextTexts from []string.
func NewStringArrayChunkNextTexts(v []string) ChunkNextTexts {
	var s ChunkNextTexts
	s.SetStringArray(v)
	return s
}

// SetNull sets ChunkNextTexts to struct{}.
func (s *ChunkNextTexts) SetNull(v struct{}) {
	s.Type = NullChunkNextTexts
	s.Null = v
}

// GetNull returns struct{} and true boolean if ChunkNextTexts is struct{}.
func (s ChunkNextTexts) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullChunkNextTexts returns new ChunkNextTexts from struct{}.
func NewNullChunkNextTexts(v struct{}) ChunkNextTexts {
	var s ChunkNextTexts
	s.SetNull(v)
	return s
}

// ChunkPreviousTexts represents sum type.
type ChunkPreviousTexts struct {
	Type        ChunkPreviousTextsType // switch on this field
	StringArray []string
	Null        struct{}
}

// ChunkPreviousTextsType is oneOf type of ChunkPreviousTexts.
type ChunkPreviousTextsType string

// Possible values for ChunkPreviousTextsType.
const (
	StringArrayChunkPreviousTexts ChunkPreviousTextsType = "[]string"
	NullChunkPreviousTexts        ChunkPreviousTextsType = "struct{}"
)

// IsStringArray reports whether ChunkPreviousTexts is []string.
func (s ChunkPreviousTexts) IsStringArray() bool { return s.Type == StringArrayChunkPreviousTexts }

// IsNull reports whether ChunkPreviousTexts is struct{}.
func (s ChunkPreviousTexts) IsNull() bool { return s.Type == NullChunkPreviousTexts }

// SetStringArray sets ChunkPreviousTexts to []string.
func (s *ChunkPreviousTexts) SetStringArray(v []string) {
	s.Type = StringArrayChunkPreviousTexts
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ChunkPreviousTexts is []string.
func (s ChunkPreviousTexts) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayChunkPreviousTexts returns new ChunkPreviousTexts from []string.
func NewStringArrayChunkPreviousTexts(v []string) ChunkPreviousTexts {
	var s ChunkPreviousTexts
	s.SetStringArray(v)
	return s
}

// SetNull sets ChunkPreviousTexts to struct{}.
func (s *ChunkPreviousTexts) SetNull(v struct{}) {
	s.Type = NullChunkPreviousTexts
	s.Null = v
}

// GetNull returns struct{} and true boolean if ChunkPreviousTexts is struct{}.
func (s ChunkPreviousTexts) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullChunkPreviousTexts returns new ChunkPreviousTexts from struct{}.
func NewNullChunkPreviousTexts(v struct{}) ChunkPreviousTexts {
	var s ChunkPreviousTexts
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/ChunksBody
type ChunksBody struct {
	Text           string                     `json:"text"`
	ContextFilter  OptChunksBodyContextFilter `json:"context_filter"`
	Limit          OptInt                     `json:"limit"`
	PrevNextChunks OptInt                     `json:"prev_next_chunks"`
}

// GetText returns the value of Text.
func (s *ChunksBody) GetText() string {
	return s.Text
}

// GetContextFilter returns the value of ContextFilter.
func (s *ChunksBody) GetContextFilter() OptChunksBodyContextFilter {
	return s.ContextFilter
}

// GetLimit returns the value of Limit.
func (s *ChunksBody) GetLimit() OptInt {
	return s.Limit
}

// GetPrevNextChunks returns the value of PrevNextChunks.
func (s *ChunksBody) GetPrevNextChunks() OptInt {
	return s.PrevNextChunks
}

// SetText sets the value of Text.
func (s *ChunksBody) SetText(val string) {
	s.Text = val
}

// SetContextFilter sets the value of ContextFilter.
func (s *ChunksBody) SetContextFilter(val OptChunksBodyContextFilter) {
	s.ContextFilter = val
}

// SetLimit sets the value of Limit.
func (s *ChunksBody) SetLimit(val OptInt) {
	s.Limit = val
}

// SetPrevNextChunks sets the value of PrevNextChunks.
func (s *ChunksBody) SetPrevNextChunks(val OptInt) {
	s.PrevNextChunks = val
}

// ChunksBodyContextFilter represents sum type.
type ChunksBodyContextFilter struct {
	Type          ChunksBodyContextFilterType // switch on this field
	ContextFilter ContextFilter
	Null          struct{}
}

// ChunksBodyContextFilterType is oneOf type of ChunksBodyContextFilter.
type ChunksBodyContextFilterType string

// Possible values for ChunksBodyContextFilterType.
const (
	ContextFilterChunksBodyContextFilter ChunksBodyContextFilterType = "ContextFilter"
	NullChunksBodyContextFilter          ChunksBodyContextFilterType = "struct{}"
)

// IsContextFilter reports whether ChunksBodyContextFilter is ContextFilter.
func (s ChunksBodyContextFilter) IsContextFilter() bool {
	return s.Type == ContextFilterChunksBodyContextFilter
}

// IsNull reports whether ChunksBodyContextFilter is struct{}.
func (s ChunksBodyContextFilter) IsNull() bool { return s.Type == NullChunksBodyContextFilter }

// SetContextFilter sets ChunksBodyContextFilter to ContextFilter.
func (s *ChunksBodyContextFilter) SetContextFilter(v ContextFilter) {
	s.Type = ContextFilterChunksBodyContextFilter
	s.ContextFilter = v
}

// GetContextFilter returns ContextFilter and true boolean if ChunksBodyContextFilter is ContextFilter.
func (s ChunksBodyContextFilter) GetContextFilter() (v ContextFilter, ok bool) {
	if !s.IsContextFilter() {
		return v, false
	}
	return s.ContextFilter, true
}

// NewContextFilterChunksBodyContextFilter returns new ChunksBodyContextFilter from ContextFilter.
func NewContextFilterChunksBodyContextFilter(v ContextFilter) ChunksBodyContextFilter {
	var s ChunksBodyContextFilter
	s.SetContextFilter(v)
	return s
}

// SetNull sets ChunksBodyContextFilter to struct{}.
func (s *ChunksBodyContextFilter) SetNull(v struct{}) {
	s.Type = NullChunksBodyContextFilter
	s.Null = v
}

// GetNull returns struct{} and true boolean if ChunksBodyContextFilter is struct{}.
func (s ChunksBodyContextFilter) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullChunksBodyContextFilter returns new ChunksBodyContextFilter from struct{}.
func NewNullChunksBodyContextFilter(v struct{}) ChunksBodyContextFilter {
	var s ChunksBodyContextFilter
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/ChunksResponse
type ChunksResponse struct {
	Object jx.Raw  `json:"object"`
	Model  jx.Raw  `json:"model"`
	Data   []Chunk `json:"data"`
}

// GetObject returns the value of Object.
func (s *ChunksResponse) GetObject() jx.Raw {
	return s.Object
}

// GetModel returns the value of Model.
func (s *ChunksResponse) GetModel() jx.Raw {
	return s.Model
}

// GetData returns the value of Data.
func (s *ChunksResponse) GetData() []Chunk {
	return s.Data
}

// SetObject sets the value of Object.
func (s *ChunksResponse) SetObject(val jx.Raw) {
	s.Object = val
}

// SetModel sets the value of Model.
func (s *ChunksResponse) SetModel(val jx.Raw) {
	s.Model = val
}

// SetData sets the value of Data.
func (s *ChunksResponse) SetData(val []Chunk) {
	s.Data = val
}

func (*ChunksResponse) chunksRetrievalV1ChunksPostRes() {}

// Ref: #/components/schemas/CompletionsBody
type CompletionsBody struct {
	Prompt         string                          `json:"prompt"`
	SystemPrompt   OptCompletionsBodySystemPrompt  `json:"system_prompt"`
	UseContext     OptBool                         `json:"use_context"`
	ContextFilter  OptCompletionsBodyContextFilter `json:"context_filter"`
	IncludeSources OptBool                         `json:"include_sources"`
	Stream         OptBool                         `json:"stream"`
}

// GetPrompt returns the value of Prompt.
func (s *CompletionsBody) GetPrompt() string {
	return s.Prompt
}

// GetSystemPrompt returns the value of SystemPrompt.
func (s *CompletionsBody) GetSystemPrompt() OptCompletionsBodySystemPrompt {
	return s.SystemPrompt
}

// GetUseContext returns the value of UseContext.
func (s *CompletionsBody) GetUseContext() OptBool {
	return s.UseContext
}

// GetContextFilter returns the value of ContextFilter.
func (s *CompletionsBody) GetContextFilter() OptCompletionsBodyContextFilter {
	return s.ContextFilter
}

// GetIncludeSources returns the value of IncludeSources.
func (s *CompletionsBody) GetIncludeSources() OptBool {
	return s.IncludeSources
}

// GetStream returns the value of Stream.
func (s *CompletionsBody) GetStream() OptBool {
	return s.Stream
}

// SetPrompt sets the value of Prompt.
func (s *CompletionsBody) SetPrompt(val string) {
	s.Prompt = val
}

// SetSystemPrompt sets the value of SystemPrompt.
func (s *CompletionsBody) SetSystemPrompt(val OptCompletionsBodySystemPrompt) {
	s.SystemPrompt = val
}

// SetUseContext sets the value of UseContext.
func (s *CompletionsBody) SetUseContext(val OptBool) {
	s.UseContext = val
}

// SetContextFilter sets the value of ContextFilter.
func (s *CompletionsBody) SetContextFilter(val OptCompletionsBodyContextFilter) {
	s.ContextFilter = val
}

// SetIncludeSources sets the value of IncludeSources.
func (s *CompletionsBody) SetIncludeSources(val OptBool) {
	s.IncludeSources = val
}

// SetStream sets the value of Stream.
func (s *CompletionsBody) SetStream(val OptBool) {
	s.Stream = val
}

// CompletionsBodyContextFilter represents sum type.
type CompletionsBodyContextFilter struct {
	Type          CompletionsBodyContextFilterType // switch on this field
	ContextFilter ContextFilter
	Null          struct{}
}

// CompletionsBodyContextFilterType is oneOf type of CompletionsBodyContextFilter.
type CompletionsBodyContextFilterType string

// Possible values for CompletionsBodyContextFilterType.
const (
	ContextFilterCompletionsBodyContextFilter CompletionsBodyContextFilterType = "ContextFilter"
	NullCompletionsBodyContextFilter          CompletionsBodyContextFilterType = "struct{}"
)

// IsContextFilter reports whether CompletionsBodyContextFilter is ContextFilter.
func (s CompletionsBodyContextFilter) IsContextFilter() bool {
	return s.Type == ContextFilterCompletionsBodyContextFilter
}

// IsNull reports whether CompletionsBodyContextFilter is struct{}.
func (s CompletionsBodyContextFilter) IsNull() bool {
	return s.Type == NullCompletionsBodyContextFilter
}

// SetContextFilter sets CompletionsBodyContextFilter to ContextFilter.
func (s *CompletionsBodyContextFilter) SetContextFilter(v ContextFilter) {
	s.Type = ContextFilterCompletionsBodyContextFilter
	s.ContextFilter = v
}

// GetContextFilter returns ContextFilter and true boolean if CompletionsBodyContextFilter is ContextFilter.
func (s CompletionsBodyContextFilter) GetContextFilter() (v ContextFilter, ok bool) {
	if !s.IsContextFilter() {
		return v, false
	}
	return s.ContextFilter, true
}

// NewContextFilterCompletionsBodyContextFilter returns new CompletionsBodyContextFilter from ContextFilter.
func NewContextFilterCompletionsBodyContextFilter(v ContextFilter) CompletionsBodyContextFilter {
	var s CompletionsBodyContextFilter
	s.SetContextFilter(v)
	return s
}

// SetNull sets CompletionsBodyContextFilter to struct{}.
func (s *CompletionsBodyContextFilter) SetNull(v struct{}) {
	s.Type = NullCompletionsBodyContextFilter
	s.Null = v
}

// GetNull returns struct{} and true boolean if CompletionsBodyContextFilter is struct{}.
func (s CompletionsBodyContextFilter) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullCompletionsBodyContextFilter returns new CompletionsBodyContextFilter from struct{}.
func NewNullCompletionsBodyContextFilter(v struct{}) CompletionsBodyContextFilter {
	var s CompletionsBodyContextFilter
	s.SetNull(v)
	return s
}

// CompletionsBodySystemPrompt represents sum type.
type CompletionsBodySystemPrompt struct {
	Type   CompletionsBodySystemPromptType // switch on this field
	String string
	Null   struct{}
}

// CompletionsBodySystemPromptType is oneOf type of CompletionsBodySystemPrompt.
type CompletionsBodySystemPromptType string

// Possible values for CompletionsBodySystemPromptType.
const (
	StringCompletionsBodySystemPrompt CompletionsBodySystemPromptType = "string"
	NullCompletionsBodySystemPrompt   CompletionsBodySystemPromptType = "struct{}"
)

// IsString reports whether CompletionsBodySystemPrompt is string.
func (s CompletionsBodySystemPrompt) IsString() bool {
	return s.Type == StringCompletionsBodySystemPrompt
}

// IsNull reports whether CompletionsBodySystemPrompt is struct{}.
func (s CompletionsBodySystemPrompt) IsNull() bool { return s.Type == NullCompletionsBodySystemPrompt }

// SetString sets CompletionsBodySystemPrompt to string.
func (s *CompletionsBodySystemPrompt) SetString(v string) {
	s.Type = StringCompletionsBodySystemPrompt
	s.String = v
}

// GetString returns string and true boolean if CompletionsBodySystemPrompt is string.
func (s CompletionsBodySystemPrompt) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCompletionsBodySystemPrompt returns new CompletionsBodySystemPrompt from string.
func NewStringCompletionsBodySystemPrompt(v string) CompletionsBodySystemPrompt {
	var s CompletionsBodySystemPrompt
	s.SetString(v)
	return s
}

// SetNull sets CompletionsBodySystemPrompt to struct{}.
func (s *CompletionsBodySystemPrompt) SetNull(v struct{}) {
	s.Type = NullCompletionsBodySystemPrompt
	s.Null = v
}

// GetNull returns struct{} and true boolean if CompletionsBodySystemPrompt is struct{}.
func (s CompletionsBodySystemPrompt) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullCompletionsBodySystemPrompt returns new CompletionsBodySystemPrompt from struct{}.
func NewNullCompletionsBodySystemPrompt(v struct{}) CompletionsBodySystemPrompt {
	var s CompletionsBodySystemPrompt
	s.SetNull(v)
	return s
}

// Ref: #/components/schemas/ContextFilter
type ContextFilter struct {
	DocsIds ContextFilterDocsIds `json:"docs_ids"`
}

// GetDocsIds returns the value of DocsIds.
func (s *ContextFilter) GetDocsIds() ContextFilterDocsIds {
	return s.DocsIds
}

// SetDocsIds sets the value of DocsIds.
func (s *ContextFilter) SetDocsIds(val ContextFilterDocsIds) {
	s.DocsIds = val
}

// ContextFilterDocsIds represents sum type.
type ContextFilterDocsIds struct {
	Type        ContextFilterDocsIdsType // switch on this field
	StringArray []string
	Null        struct{}
}

// ContextFilterDocsIdsType is oneOf type of ContextFilterDocsIds.
type ContextFilterDocsIdsType string

// Possible values for ContextFilterDocsIdsType.
const (
	StringArrayContextFilterDocsIds ContextFilterDocsIdsType = "[]string"
	NullContextFilterDocsIds        ContextFilterDocsIdsType = "struct{}"
)

// IsStringArray reports whether ContextFilterDocsIds is []string.
func (s ContextFilterDocsIds) IsStringArray() bool { return s.Type == StringArrayContextFilterDocsIds }

// IsNull reports whether ContextFilterDocsIds is struct{}.
func (s ContextFilterDocsIds) IsNull() bool { return s.Type == NullContextFilterDocsIds }

// SetStringArray sets ContextFilterDocsIds to []string.
func (s *ContextFilterDocsIds) SetStringArray(v []string) {
	s.Type = StringArrayContextFilterDocsIds
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if ContextFilterDocsIds is []string.
func (s ContextFilterDocsIds) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayContextFilterDocsIds returns new ContextFilterDocsIds from []string.
func NewStringArrayContextFilterDocsIds(v []string) ContextFilterDocsIds {
	var s ContextFilterDocsIds
	s.SetStringArray(v)
	return s
}

// SetNull sets ContextFilterDocsIds to struct{}.
func (s *ContextFilterDocsIds) SetNull(v struct{}) {
	s.Type = NullContextFilterDocsIds
	s.Null = v
}

// GetNull returns struct{} and true boolean if ContextFilterDocsIds is struct{}.
func (s ContextFilterDocsIds) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullContextFilterDocsIds returns new ContextFilterDocsIds from struct{}.
func NewNullContextFilterDocsIds(v struct{}) ContextFilterDocsIds {
	var s ContextFilterDocsIds
	s.SetNull(v)
	return s
}

type DeleteIngestedV1IngestDocIDDeleteOKApplicationJSON jx.Raw

func (*DeleteIngestedV1IngestDocIDDeleteOKApplicationJSON) deleteIngestedV1IngestDocIDDeleteRes() {}

// Ref: #/components/schemas/Embedding
type Embedding struct {
	Index     int       `json:"index"`
	Object    jx.Raw    `json:"object"`
	Embedding []float64 `json:"embedding"`
}

// GetIndex returns the value of Index.
func (s *Embedding) GetIndex() int {
	return s.Index
}

// GetObject returns the value of Object.
func (s *Embedding) GetObject() jx.Raw {
	return s.Object
}

// GetEmbedding returns the value of Embedding.
func (s *Embedding) GetEmbedding() []float64 {
	return s.Embedding
}

// SetIndex sets the value of Index.
func (s *Embedding) SetIndex(val int) {
	s.Index = val
}

// SetObject sets the value of Object.
func (s *Embedding) SetObject(val jx.Raw) {
	s.Object = val
}

// SetEmbedding sets the value of Embedding.
func (s *Embedding) SetEmbedding(val []float64) {
	s.Embedding = val
}

// Ref: #/components/schemas/EmbeddingsBody
type EmbeddingsBody struct {
	Input EmbeddingsBodyInput `json:"input"`
}

// GetInput returns the value of Input.
func (s *EmbeddingsBody) GetInput() EmbeddingsBodyInput {
	return s.Input
}

// SetInput sets the value of Input.
func (s *EmbeddingsBody) SetInput(val EmbeddingsBodyInput) {
	s.Input = val
}

// EmbeddingsBodyInput represents sum type.
type EmbeddingsBodyInput struct {
	Type        EmbeddingsBodyInputType // switch on this field
	String      string
	StringArray []string
}

// EmbeddingsBodyInputType is oneOf type of EmbeddingsBodyInput.
type EmbeddingsBodyInputType string

// Possible values for EmbeddingsBodyInputType.
const (
	StringEmbeddingsBodyInput      EmbeddingsBodyInputType = "string"
	StringArrayEmbeddingsBodyInput EmbeddingsBodyInputType = "[]string"
)

// IsString reports whether EmbeddingsBodyInput is string.
func (s EmbeddingsBodyInput) IsString() bool { return s.Type == StringEmbeddingsBodyInput }

// IsStringArray reports whether EmbeddingsBodyInput is []string.
func (s EmbeddingsBodyInput) IsStringArray() bool { return s.Type == StringArrayEmbeddingsBodyInput }

// SetString sets EmbeddingsBodyInput to string.
func (s *EmbeddingsBodyInput) SetString(v string) {
	s.Type = StringEmbeddingsBodyInput
	s.String = v
}

// GetString returns string and true boolean if EmbeddingsBodyInput is string.
func (s EmbeddingsBodyInput) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringEmbeddingsBodyInput returns new EmbeddingsBodyInput from string.
func NewStringEmbeddingsBodyInput(v string) EmbeddingsBodyInput {
	var s EmbeddingsBodyInput
	s.SetString(v)
	return s
}

// SetStringArray sets EmbeddingsBodyInput to []string.
func (s *EmbeddingsBodyInput) SetStringArray(v []string) {
	s.Type = StringArrayEmbeddingsBodyInput
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if EmbeddingsBodyInput is []string.
func (s EmbeddingsBodyInput) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayEmbeddingsBodyInput returns new EmbeddingsBodyInput from []string.
func NewStringArrayEmbeddingsBodyInput(v []string) EmbeddingsBodyInput {
	var s EmbeddingsBodyInput
	s.SetStringArray(v)
	return s
}

// Ref: #/components/schemas/EmbeddingsResponse
type EmbeddingsResponse struct {
	Object jx.Raw      `json:"object"`
	Model  jx.Raw      `json:"model"`
	Data   []Embedding `json:"data"`
}

// GetObject returns the value of Object.
func (s *EmbeddingsResponse) GetObject() jx.Raw {
	return s.Object
}

// GetModel returns the value of Model.
func (s *EmbeddingsResponse) GetModel() jx.Raw {
	return s.Model
}

// GetData returns the value of Data.
func (s *EmbeddingsResponse) GetData() []Embedding {
	return s.Data
}

// SetObject sets the value of Object.
func (s *EmbeddingsResponse) SetObject(val jx.Raw) {
	s.Object = val
}

// SetModel sets the value of Model.
func (s *EmbeddingsResponse) SetModel(val jx.Raw) {
	s.Model = val
}

// SetData sets the value of Data.
func (s *EmbeddingsResponse) SetData(val []Embedding) {
	s.Data = val
}

func (*EmbeddingsResponse) embeddingsGenerationV1EmbeddingsPostRes() {}

// Ref: #/components/schemas/HTTPValidationError
type HTTPValidationError struct {
	Detail []ValidationError `json:"detail"`
}

// GetDetail returns the value of Detail.
func (s *HTTPValidationError) GetDetail() []ValidationError {
	return s.Detail
}

// SetDetail sets the value of Detail.
func (s *HTTPValidationError) SetDetail(val []ValidationError) {
	s.Detail = val
}

func (*HTTPValidationError) chatCompletionV1ChatCompletionsPostRes()  {}
func (*HTTPValidationError) chunksRetrievalV1ChunksPostRes()          {}
func (*HTTPValidationError) deleteIngestedV1IngestDocIDDeleteRes()    {}
func (*HTTPValidationError) embeddingsGenerationV1EmbeddingsPostRes() {}
func (*HTTPValidationError) ingestFileV1IngestFilePostRes()           {}
func (*HTTPValidationError) ingestTextV1IngestTextPostRes()           {}
func (*HTTPValidationError) ingestV1IngestPostRes()                   {}
func (*HTTPValidationError) promptCompletionV1CompletionsPostRes()    {}

// Ref: #/components/schemas/HealthResponse
type HealthResponse struct {
	Status OptString `json:"status"`
}

// GetStatus returns the value of Status.
func (s *HealthResponse) GetStatus() OptString {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *HealthResponse) SetStatus(val OptString) {
	s.Status = val
}

// Ref: #/components/schemas/IngestResponse
type IngestResponse struct {
	Object jx.Raw        `json:"object"`
	Model  jx.Raw        `json:"model"`
	Data   []IngestedDoc `json:"data"`
}

// GetObject returns the value of Object.
func (s *IngestResponse) GetObject() jx.Raw {
	return s.Object
}

// GetModel returns the value of Model.
func (s *IngestResponse) GetModel() jx.Raw {
	return s.Model
}

// GetData returns the value of Data.
func (s *IngestResponse) GetData() []IngestedDoc {
	return s.Data
}

// SetObject sets the value of Object.
func (s *IngestResponse) SetObject(val jx.Raw) {
	s.Object = val
}

// SetModel sets the value of Model.
func (s *IngestResponse) SetModel(val jx.Raw) {
	s.Model = val
}

// SetData sets the value of Data.
func (s *IngestResponse) SetData(val []IngestedDoc) {
	s.Data = val
}

func (*IngestResponse) ingestFileV1IngestFilePostRes() {}
func (*IngestResponse) ingestTextV1IngestTextPostRes() {}
func (*IngestResponse) ingestV1IngestPostRes()         {}

// Ref: #/components/schemas/IngestTextBody
type IngestTextBody struct {
	FileName string `json:"file_name"`
	Text     string `json:"text"`
}

// GetFileName returns the value of FileName.
func (s *IngestTextBody) GetFileName() string {
	return s.FileName
}

// GetText returns the value of Text.
func (s *IngestTextBody) GetText() string {
	return s.Text
}

// SetFileName sets the value of FileName.
func (s *IngestTextBody) SetFileName(val string) {
	s.FileName = val
}

// SetText sets the value of Text.
func (s *IngestTextBody) SetText(val string) {
	s.Text = val
}

// Ref: #/components/schemas/IngestedDoc
type IngestedDoc struct {
	Object      jx.Raw                 `json:"object"`
	DocID       string                 `json:"doc_id"`
	DocMetadata IngestedDocDocMetadata `json:"doc_metadata"`
}

// GetObject returns the value of Object.
func (s *IngestedDoc) GetObject() jx.Raw {
	return s.Object
}

// GetDocID returns the value of DocID.
func (s *IngestedDoc) GetDocID() string {
	return s.DocID
}

// GetDocMetadata returns the value of DocMetadata.
func (s *IngestedDoc) GetDocMetadata() IngestedDocDocMetadata {
	return s.DocMetadata
}

// SetObject sets the value of Object.
func (s *IngestedDoc) SetObject(val jx.Raw) {
	s.Object = val
}

// SetDocID sets the value of DocID.
func (s *IngestedDoc) SetDocID(val string) {
	s.DocID = val
}

// SetDocMetadata sets the value of DocMetadata.
func (s *IngestedDoc) SetDocMetadata(val IngestedDocDocMetadata) {
	s.DocMetadata = val
}

// IngestedDocDocMetadata represents sum type.
type IngestedDocDocMetadata struct {
	Type                    IngestedDocDocMetadataType // switch on this field
	IngestedDocDocMetadata0 IngestedDocDocMetadata0
	Null                    struct{}
}

// IngestedDocDocMetadataType is oneOf type of IngestedDocDocMetadata.
type IngestedDocDocMetadataType string

// Possible values for IngestedDocDocMetadataType.
const (
	IngestedDocDocMetadata0IngestedDocDocMetadata IngestedDocDocMetadataType = "IngestedDocDocMetadata0"
	NullIngestedDocDocMetadata                    IngestedDocDocMetadataType = "struct{}"
)

// IsIngestedDocDocMetadata0 reports whether IngestedDocDocMetadata is IngestedDocDocMetadata0.
func (s IngestedDocDocMetadata) IsIngestedDocDocMetadata0() bool {
	return s.Type == IngestedDocDocMetadata0IngestedDocDocMetadata
}

// IsNull reports whether IngestedDocDocMetadata is struct{}.
func (s IngestedDocDocMetadata) IsNull() bool { return s.Type == NullIngestedDocDocMetadata }

// SetIngestedDocDocMetadata0 sets IngestedDocDocMetadata to IngestedDocDocMetadata0.
func (s *IngestedDocDocMetadata) SetIngestedDocDocMetadata0(v IngestedDocDocMetadata0) {
	s.Type = IngestedDocDocMetadata0IngestedDocDocMetadata
	s.IngestedDocDocMetadata0 = v
}

// GetIngestedDocDocMetadata0 returns IngestedDocDocMetadata0 and true boolean if IngestedDocDocMetadata is IngestedDocDocMetadata0.
func (s IngestedDocDocMetadata) GetIngestedDocDocMetadata0() (v IngestedDocDocMetadata0, ok bool) {
	if !s.IsIngestedDocDocMetadata0() {
		return v, false
	}
	return s.IngestedDocDocMetadata0, true
}

// NewIngestedDocDocMetadata0IngestedDocDocMetadata returns new IngestedDocDocMetadata from IngestedDocDocMetadata0.
func NewIngestedDocDocMetadata0IngestedDocDocMetadata(v IngestedDocDocMetadata0) IngestedDocDocMetadata {
	var s IngestedDocDocMetadata
	s.SetIngestedDocDocMetadata0(v)
	return s
}

// SetNull sets IngestedDocDocMetadata to struct{}.
func (s *IngestedDocDocMetadata) SetNull(v struct{}) {
	s.Type = NullIngestedDocDocMetadata
	s.Null = v
}

// GetNull returns struct{} and true boolean if IngestedDocDocMetadata is struct{}.
func (s IngestedDocDocMetadata) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullIngestedDocDocMetadata returns new IngestedDocDocMetadata from struct{}.
func NewNullIngestedDocDocMetadata(v struct{}) IngestedDocDocMetadata {
	var s IngestedDocDocMetadata
	s.SetNull(v)
	return s
}

type IngestedDocDocMetadata0 struct{}

// Response from AI.
// Either the delta or the message will be present, but never both.
// Sources used will be returned in case context retrieval was enabled.
// Ref: #/components/schemas/OpenAIChoice
type OpenAIChoice struct {
	FinishReason OpenAIChoiceFinishReason `json:"finish_reason"`
	Delta        OptOpenAIChoiceDelta     `json:"delta"`
	Message      OptOpenAIChoiceMessage   `json:"message"`
	Sources      OptOpenAIChoiceSources   `json:"sources"`
	Index        OptInt                   `json:"index"`
}

// GetFinishReason returns the value of FinishReason.
func (s *OpenAIChoice) GetFinishReason() OpenAIChoiceFinishReason {
	return s.FinishReason
}

// GetDelta returns the value of Delta.
func (s *OpenAIChoice) GetDelta() OptOpenAIChoiceDelta {
	return s.Delta
}

// GetMessage returns the value of Message.
func (s *OpenAIChoice) GetMessage() OptOpenAIChoiceMessage {
	return s.Message
}

// GetSources returns the value of Sources.
func (s *OpenAIChoice) GetSources() OptOpenAIChoiceSources {
	return s.Sources
}

// GetIndex returns the value of Index.
func (s *OpenAIChoice) GetIndex() OptInt {
	return s.Index
}

// SetFinishReason sets the value of FinishReason.
func (s *OpenAIChoice) SetFinishReason(val OpenAIChoiceFinishReason) {
	s.FinishReason = val
}

// SetDelta sets the value of Delta.
func (s *OpenAIChoice) SetDelta(val OptOpenAIChoiceDelta) {
	s.Delta = val
}

// SetMessage sets the value of Message.
func (s *OpenAIChoice) SetMessage(val OptOpenAIChoiceMessage) {
	s.Message = val
}

// SetSources sets the value of Sources.
func (s *OpenAIChoice) SetSources(val OptOpenAIChoiceSources) {
	s.Sources = val
}

// SetIndex sets the value of Index.
func (s *OpenAIChoice) SetIndex(val OptInt) {
	s.Index = val
}

// OpenAIChoiceDelta represents sum type.
type OpenAIChoiceDelta struct {
	Type        OpenAIChoiceDeltaType // switch on this field
	OpenAIDelta OpenAIDelta
	Null        struct{}
}

// OpenAIChoiceDeltaType is oneOf type of OpenAIChoiceDelta.
type OpenAIChoiceDeltaType string

// Possible values for OpenAIChoiceDeltaType.
const (
	OpenAIDeltaOpenAIChoiceDelta OpenAIChoiceDeltaType = "OpenAIDelta"
	NullOpenAIChoiceDelta        OpenAIChoiceDeltaType = "struct{}"
)

// IsOpenAIDelta reports whether OpenAIChoiceDelta is OpenAIDelta.
func (s OpenAIChoiceDelta) IsOpenAIDelta() bool { return s.Type == OpenAIDeltaOpenAIChoiceDelta }

// IsNull reports whether OpenAIChoiceDelta is struct{}.
func (s OpenAIChoiceDelta) IsNull() bool { return s.Type == NullOpenAIChoiceDelta }

// SetOpenAIDelta sets OpenAIChoiceDelta to OpenAIDelta.
func (s *OpenAIChoiceDelta) SetOpenAIDelta(v OpenAIDelta) {
	s.Type = OpenAIDeltaOpenAIChoiceDelta
	s.OpenAIDelta = v
}

// GetOpenAIDelta returns OpenAIDelta and true boolean if OpenAIChoiceDelta is OpenAIDelta.
func (s OpenAIChoiceDelta) GetOpenAIDelta() (v OpenAIDelta, ok bool) {
	if !s.IsOpenAIDelta() {
		return v, false
	}
	return s.OpenAIDelta, true
}

// NewOpenAIDeltaOpenAIChoiceDelta returns new OpenAIChoiceDelta from OpenAIDelta.
func NewOpenAIDeltaOpenAIChoiceDelta(v OpenAIDelta) OpenAIChoiceDelta {
	var s OpenAIChoiceDelta
	s.SetOpenAIDelta(v)
	return s
}

// SetNull sets OpenAIChoiceDelta to struct{}.
func (s *OpenAIChoiceDelta) SetNull(v struct{}) {
	s.Type = NullOpenAIChoiceDelta
	s.Null = v
}

// GetNull returns struct{} and true boolean if OpenAIChoiceDelta is struct{}.
func (s OpenAIChoiceDelta) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOpenAIChoiceDelta returns new OpenAIChoiceDelta from struct{}.
func NewNullOpenAIChoiceDelta(v struct{}) OpenAIChoiceDelta {
	var s OpenAIChoiceDelta
	s.SetNull(v)
	return s
}

// OpenAIChoiceFinishReason represents sum type.
type OpenAIChoiceFinishReason struct {
	Type   OpenAIChoiceFinishReasonType // switch on this field
	String string
	Null   struct{}
}

// OpenAIChoiceFinishReasonType is oneOf type of OpenAIChoiceFinishReason.
type OpenAIChoiceFinishReasonType string

// Possible values for OpenAIChoiceFinishReasonType.
const (
	StringOpenAIChoiceFinishReason OpenAIChoiceFinishReasonType = "string"
	NullOpenAIChoiceFinishReason   OpenAIChoiceFinishReasonType = "struct{}"
)

// IsString reports whether OpenAIChoiceFinishReason is string.
func (s OpenAIChoiceFinishReason) IsString() bool { return s.Type == StringOpenAIChoiceFinishReason }

// IsNull reports whether OpenAIChoiceFinishReason is struct{}.
func (s OpenAIChoiceFinishReason) IsNull() bool { return s.Type == NullOpenAIChoiceFinishReason }

// SetString sets OpenAIChoiceFinishReason to string.
func (s *OpenAIChoiceFinishReason) SetString(v string) {
	s.Type = StringOpenAIChoiceFinishReason
	s.String = v
}

// GetString returns string and true boolean if OpenAIChoiceFinishReason is string.
func (s OpenAIChoiceFinishReason) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringOpenAIChoiceFinishReason returns new OpenAIChoiceFinishReason from string.
func NewStringOpenAIChoiceFinishReason(v string) OpenAIChoiceFinishReason {
	var s OpenAIChoiceFinishReason
	s.SetString(v)
	return s
}

// SetNull sets OpenAIChoiceFinishReason to struct{}.
func (s *OpenAIChoiceFinishReason) SetNull(v struct{}) {
	s.Type = NullOpenAIChoiceFinishReason
	s.Null = v
}

// GetNull returns struct{} and true boolean if OpenAIChoiceFinishReason is struct{}.
func (s OpenAIChoiceFinishReason) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOpenAIChoiceFinishReason returns new OpenAIChoiceFinishReason from struct{}.
func NewNullOpenAIChoiceFinishReason(v struct{}) OpenAIChoiceFinishReason {
	var s OpenAIChoiceFinishReason
	s.SetNull(v)
	return s
}

// OpenAIChoiceMessage represents sum type.
type OpenAIChoiceMessage struct {
	Type          OpenAIChoiceMessageType // switch on this field
	OpenAIMessage OpenAIMessage
	Null          struct{}
}

// OpenAIChoiceMessageType is oneOf type of OpenAIChoiceMessage.
type OpenAIChoiceMessageType string

// Possible values for OpenAIChoiceMessageType.
const (
	OpenAIMessageOpenAIChoiceMessage OpenAIChoiceMessageType = "OpenAIMessage"
	NullOpenAIChoiceMessage          OpenAIChoiceMessageType = "struct{}"
)

// IsOpenAIMessage reports whether OpenAIChoiceMessage is OpenAIMessage.
func (s OpenAIChoiceMessage) IsOpenAIMessage() bool {
	return s.Type == OpenAIMessageOpenAIChoiceMessage
}

// IsNull reports whether OpenAIChoiceMessage is struct{}.
func (s OpenAIChoiceMessage) IsNull() bool { return s.Type == NullOpenAIChoiceMessage }

// SetOpenAIMessage sets OpenAIChoiceMessage to OpenAIMessage.
func (s *OpenAIChoiceMessage) SetOpenAIMessage(v OpenAIMessage) {
	s.Type = OpenAIMessageOpenAIChoiceMessage
	s.OpenAIMessage = v
}

// GetOpenAIMessage returns OpenAIMessage and true boolean if OpenAIChoiceMessage is OpenAIMessage.
func (s OpenAIChoiceMessage) GetOpenAIMessage() (v OpenAIMessage, ok bool) {
	if !s.IsOpenAIMessage() {
		return v, false
	}
	return s.OpenAIMessage, true
}

// NewOpenAIMessageOpenAIChoiceMessage returns new OpenAIChoiceMessage from OpenAIMessage.
func NewOpenAIMessageOpenAIChoiceMessage(v OpenAIMessage) OpenAIChoiceMessage {
	var s OpenAIChoiceMessage
	s.SetOpenAIMessage(v)
	return s
}

// SetNull sets OpenAIChoiceMessage to struct{}.
func (s *OpenAIChoiceMessage) SetNull(v struct{}) {
	s.Type = NullOpenAIChoiceMessage
	s.Null = v
}

// GetNull returns struct{} and true boolean if OpenAIChoiceMessage is struct{}.
func (s OpenAIChoiceMessage) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOpenAIChoiceMessage returns new OpenAIChoiceMessage from struct{}.
func NewNullOpenAIChoiceMessage(v struct{}) OpenAIChoiceMessage {
	var s OpenAIChoiceMessage
	s.SetNull(v)
	return s
}

// OpenAIChoiceSources represents sum type.
type OpenAIChoiceSources struct {
	Type       OpenAIChoiceSourcesType // switch on this field
	ChunkArray []Chunk
	Null       struct{}
}

// OpenAIChoiceSourcesType is oneOf type of OpenAIChoiceSources.
type OpenAIChoiceSourcesType string

// Possible values for OpenAIChoiceSourcesType.
const (
	ChunkArrayOpenAIChoiceSources OpenAIChoiceSourcesType = "[]Chunk"
	NullOpenAIChoiceSources       OpenAIChoiceSourcesType = "struct{}"
)

// IsChunkArray reports whether OpenAIChoiceSources is []Chunk.
func (s OpenAIChoiceSources) IsChunkArray() bool { return s.Type == ChunkArrayOpenAIChoiceSources }

// IsNull reports whether OpenAIChoiceSources is struct{}.
func (s OpenAIChoiceSources) IsNull() bool { return s.Type == NullOpenAIChoiceSources }

// SetChunkArray sets OpenAIChoiceSources to []Chunk.
func (s *OpenAIChoiceSources) SetChunkArray(v []Chunk) {
	s.Type = ChunkArrayOpenAIChoiceSources
	s.ChunkArray = v
}

// GetChunkArray returns []Chunk and true boolean if OpenAIChoiceSources is []Chunk.
func (s OpenAIChoiceSources) GetChunkArray() (v []Chunk, ok bool) {
	if !s.IsChunkArray() {
		return v, false
	}
	return s.ChunkArray, true
}

// NewChunkArrayOpenAIChoiceSources returns new OpenAIChoiceSources from []Chunk.
func NewChunkArrayOpenAIChoiceSources(v []Chunk) OpenAIChoiceSources {
	var s OpenAIChoiceSources
	s.SetChunkArray(v)
	return s
}

// SetNull sets OpenAIChoiceSources to struct{}.
func (s *OpenAIChoiceSources) SetNull(v struct{}) {
	s.Type = NullOpenAIChoiceSources
	s.Null = v
}

// GetNull returns struct{} and true boolean if OpenAIChoiceSources is struct{}.
func (s OpenAIChoiceSources) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOpenAIChoiceSources returns new OpenAIChoiceSources from struct{}.
func NewNullOpenAIChoiceSources(v struct{}) OpenAIChoiceSources {
	var s OpenAIChoiceSources
	s.SetNull(v)
	return s
}

// Clone of OpenAI Completion model.
// For more information see: https://platform.openai.com/docs/api-reference/chat/object.
// Ref: #/components/schemas/OpenAICompletion
type OpenAICompletion struct {
	ID      string                    `json:"id"`
	Object  OptOpenAICompletionObject `json:"object"`
	Created int                       `json:"created"`
	Model   jx.Raw                    `json:"model"`
	Choices []OpenAIChoice            `json:"choices"`
}

// GetID returns the value of ID.
func (s *OpenAICompletion) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *OpenAICompletion) GetObject() OptOpenAICompletionObject {
	return s.Object
}

// GetCreated returns the value of Created.
func (s *OpenAICompletion) GetCreated() int {
	return s.Created
}

// GetModel returns the value of Model.
func (s *OpenAICompletion) GetModel() jx.Raw {
	return s.Model
}

// GetChoices returns the value of Choices.
func (s *OpenAICompletion) GetChoices() []OpenAIChoice {
	return s.Choices
}

// SetID sets the value of ID.
func (s *OpenAICompletion) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *OpenAICompletion) SetObject(val OptOpenAICompletionObject) {
	s.Object = val
}

// SetCreated sets the value of Created.
func (s *OpenAICompletion) SetCreated(val int) {
	s.Created = val
}

// SetModel sets the value of Model.
func (s *OpenAICompletion) SetModel(val jx.Raw) {
	s.Model = val
}

// SetChoices sets the value of Choices.
func (s *OpenAICompletion) SetChoices(val []OpenAIChoice) {
	s.Choices = val
}

func (*OpenAICompletion) chatCompletionV1ChatCompletionsPostRes() {}
func (*OpenAICompletion) promptCompletionV1CompletionsPostRes()   {}

type OpenAICompletionObject string

const (
	OpenAICompletionObjectCompletion      OpenAICompletionObject = "completion"
	OpenAICompletionObjectCompletionChunk OpenAICompletionObject = "completion.chunk"
)

// AllValues returns all OpenAICompletionObject values.
func (OpenAICompletionObject) AllValues() []OpenAICompletionObject {
	return []OpenAICompletionObject{
		OpenAICompletionObjectCompletion,
		OpenAICompletionObjectCompletionChunk,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpenAICompletionObject) MarshalText() ([]byte, error) {
	switch s {
	case OpenAICompletionObjectCompletion:
		return []byte(s), nil
	case OpenAICompletionObjectCompletionChunk:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpenAICompletionObject) UnmarshalText(data []byte) error {
	switch OpenAICompletionObject(data) {
	case OpenAICompletionObjectCompletion:
		*s = OpenAICompletionObjectCompletion
		return nil
	case OpenAICompletionObjectCompletionChunk:
		*s = OpenAICompletionObjectCompletionChunk
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A piece of completion that needs to be concatenated to get the full message.
// Ref: #/components/schemas/OpenAIDelta
type OpenAIDelta struct {
	Content OpenAIDeltaContent `json:"content"`
}

// GetContent returns the value of Content.
func (s *OpenAIDelta) GetContent() OpenAIDeltaContent {
	return s.Content
}

// SetContent sets the value of Content.
func (s *OpenAIDelta) SetContent(val OpenAIDeltaContent) {
	s.Content = val
}

// OpenAIDeltaContent represents sum type.
type OpenAIDeltaContent struct {
	Type   OpenAIDeltaContentType // switch on this field
	String string
	Null   struct{}
}

// OpenAIDeltaContentType is oneOf type of OpenAIDeltaContent.
type OpenAIDeltaContentType string

// Possible values for OpenAIDeltaContentType.
const (
	StringOpenAIDeltaContent OpenAIDeltaContentType = "string"
	NullOpenAIDeltaContent   OpenAIDeltaContentType = "struct{}"
)

// IsString reports whether OpenAIDeltaContent is string.
func (s OpenAIDeltaContent) IsString() bool { return s.Type == StringOpenAIDeltaContent }

// IsNull reports whether OpenAIDeltaContent is struct{}.
func (s OpenAIDeltaContent) IsNull() bool { return s.Type == NullOpenAIDeltaContent }

// SetString sets OpenAIDeltaContent to string.
func (s *OpenAIDeltaContent) SetString(v string) {
	s.Type = StringOpenAIDeltaContent
	s.String = v
}

// GetString returns string and true boolean if OpenAIDeltaContent is string.
func (s OpenAIDeltaContent) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringOpenAIDeltaContent returns new OpenAIDeltaContent from string.
func NewStringOpenAIDeltaContent(v string) OpenAIDeltaContent {
	var s OpenAIDeltaContent
	s.SetString(v)
	return s
}

// SetNull sets OpenAIDeltaContent to struct{}.
func (s *OpenAIDeltaContent) SetNull(v struct{}) {
	s.Type = NullOpenAIDeltaContent
	s.Null = v
}

// GetNull returns struct{} and true boolean if OpenAIDeltaContent is struct{}.
func (s OpenAIDeltaContent) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOpenAIDeltaContent returns new OpenAIDeltaContent from struct{}.
func NewNullOpenAIDeltaContent(v struct{}) OpenAIDeltaContent {
	var s OpenAIDeltaContent
	s.SetNull(v)
	return s
}

// Inference result, with the source of the message.
// Role could be the assistant or system
// (providing a default response, not AI generated).
// Ref: #/components/schemas/OpenAIMessage
type OpenAIMessage struct {
	Role    OptOpenAIMessageRole `json:"role"`
	Content OpenAIMessageContent `json:"content"`
}

// GetRole returns the value of Role.
func (s *OpenAIMessage) GetRole() OptOpenAIMessageRole {
	return s.Role
}

// GetContent returns the value of Content.
func (s *OpenAIMessage) GetContent() OpenAIMessageContent {
	return s.Content
}

// SetRole sets the value of Role.
func (s *OpenAIMessage) SetRole(val OptOpenAIMessageRole) {
	s.Role = val
}

// SetContent sets the value of Content.
func (s *OpenAIMessage) SetContent(val OpenAIMessageContent) {
	s.Content = val
}

// OpenAIMessageContent represents sum type.
type OpenAIMessageContent struct {
	Type   OpenAIMessageContentType // switch on this field
	String string
	Null   struct{}
}

// OpenAIMessageContentType is oneOf type of OpenAIMessageContent.
type OpenAIMessageContentType string

// Possible values for OpenAIMessageContentType.
const (
	StringOpenAIMessageContent OpenAIMessageContentType = "string"
	NullOpenAIMessageContent   OpenAIMessageContentType = "struct{}"
)

// IsString reports whether OpenAIMessageContent is string.
func (s OpenAIMessageContent) IsString() bool { return s.Type == StringOpenAIMessageContent }

// IsNull reports whether OpenAIMessageContent is struct{}.
func (s OpenAIMessageContent) IsNull() bool { return s.Type == NullOpenAIMessageContent }

// SetString sets OpenAIMessageContent to string.
func (s *OpenAIMessageContent) SetString(v string) {
	s.Type = StringOpenAIMessageContent
	s.String = v
}

// GetString returns string and true boolean if OpenAIMessageContent is string.
func (s OpenAIMessageContent) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringOpenAIMessageContent returns new OpenAIMessageContent from string.
func NewStringOpenAIMessageContent(v string) OpenAIMessageContent {
	var s OpenAIMessageContent
	s.SetString(v)
	return s
}

// SetNull sets OpenAIMessageContent to struct{}.
func (s *OpenAIMessageContent) SetNull(v struct{}) {
	s.Type = NullOpenAIMessageContent
	s.Null = v
}

// GetNull returns struct{} and true boolean if OpenAIMessageContent is struct{}.
func (s OpenAIMessageContent) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullOpenAIMessageContent returns new OpenAIMessageContent from struct{}.
func NewNullOpenAIMessageContent(v struct{}) OpenAIMessageContent {
	var s OpenAIMessageContent
	s.SetNull(v)
	return s
}

type OpenAIMessageRole string

const (
	OpenAIMessageRoleAssistant OpenAIMessageRole = "assistant"
	OpenAIMessageRoleSystem    OpenAIMessageRole = "system"
	OpenAIMessageRoleUser      OpenAIMessageRole = "user"
)

// AllValues returns all OpenAIMessageRole values.
func (OpenAIMessageRole) AllValues() []OpenAIMessageRole {
	return []OpenAIMessageRole{
		OpenAIMessageRoleAssistant,
		OpenAIMessageRoleSystem,
		OpenAIMessageRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpenAIMessageRole) MarshalText() ([]byte, error) {
	switch s {
	case OpenAIMessageRoleAssistant:
		return []byte(s), nil
	case OpenAIMessageRoleSystem:
		return []byte(s), nil
	case OpenAIMessageRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpenAIMessageRole) UnmarshalText(data []byte) error {
	switch OpenAIMessageRole(data) {
	case OpenAIMessageRoleAssistant:
		*s = OpenAIMessageRoleAssistant
		return nil
	case OpenAIMessageRoleSystem:
		*s = OpenAIMessageRoleSystem
		return nil
	case OpenAIMessageRoleUser:
		*s = OpenAIMessageRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatBodyContextFilter returns new OptChatBodyContextFilter with value set to v.
func NewOptChatBodyContextFilter(v ChatBodyContextFilter) OptChatBodyContextFilter {
	return OptChatBodyContextFilter{
		Value: v,
		Set:   true,
	}
}

// OptChatBodyContextFilter is optional ChatBodyContextFilter.
type OptChatBodyContextFilter struct {
	Value ChatBodyContextFilter
	Set   bool
}

// IsSet returns true if OptChatBodyContextFilter was set.
func (o OptChatBodyContextFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatBodyContextFilter) Reset() {
	var v ChatBodyContextFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatBodyContextFilter) SetTo(v ChatBodyContextFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatBodyContextFilter) Get() (v ChatBodyContextFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatBodyContextFilter) Or(d ChatBodyContextFilter) ChatBodyContextFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChunkNextTexts returns new OptChunkNextTexts with value set to v.
func NewOptChunkNextTexts(v ChunkNextTexts) OptChunkNextTexts {
	return OptChunkNextTexts{
		Value: v,
		Set:   true,
	}
}

// OptChunkNextTexts is optional ChunkNextTexts.
type OptChunkNextTexts struct {
	Value ChunkNextTexts
	Set   bool
}

// IsSet returns true if OptChunkNextTexts was set.
func (o OptChunkNextTexts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChunkNextTexts) Reset() {
	var v ChunkNextTexts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChunkNextTexts) SetTo(v ChunkNextTexts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChunkNextTexts) Get() (v ChunkNextTexts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChunkNextTexts) Or(d ChunkNextTexts) ChunkNextTexts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChunkPreviousTexts returns new OptChunkPreviousTexts with value set to v.
func NewOptChunkPreviousTexts(v ChunkPreviousTexts) OptChunkPreviousTexts {
	return OptChunkPreviousTexts{
		Value: v,
		Set:   true,
	}
}

// OptChunkPreviousTexts is optional ChunkPreviousTexts.
type OptChunkPreviousTexts struct {
	Value ChunkPreviousTexts
	Set   bool
}

// IsSet returns true if OptChunkPreviousTexts was set.
func (o OptChunkPreviousTexts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChunkPreviousTexts) Reset() {
	var v ChunkPreviousTexts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChunkPreviousTexts) SetTo(v ChunkPreviousTexts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChunkPreviousTexts) Get() (v ChunkPreviousTexts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChunkPreviousTexts) Or(d ChunkPreviousTexts) ChunkPreviousTexts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChunksBodyContextFilter returns new OptChunksBodyContextFilter with value set to v.
func NewOptChunksBodyContextFilter(v ChunksBodyContextFilter) OptChunksBodyContextFilter {
	return OptChunksBodyContextFilter{
		Value: v,
		Set:   true,
	}
}

// OptChunksBodyContextFilter is optional ChunksBodyContextFilter.
type OptChunksBodyContextFilter struct {
	Value ChunksBodyContextFilter
	Set   bool
}

// IsSet returns true if OptChunksBodyContextFilter was set.
func (o OptChunksBodyContextFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChunksBodyContextFilter) Reset() {
	var v ChunksBodyContextFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChunksBodyContextFilter) SetTo(v ChunksBodyContextFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChunksBodyContextFilter) Get() (v ChunksBodyContextFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChunksBodyContextFilter) Or(d ChunksBodyContextFilter) ChunksBodyContextFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompletionsBodyContextFilter returns new OptCompletionsBodyContextFilter with value set to v.
func NewOptCompletionsBodyContextFilter(v CompletionsBodyContextFilter) OptCompletionsBodyContextFilter {
	return OptCompletionsBodyContextFilter{
		Value: v,
		Set:   true,
	}
}

// OptCompletionsBodyContextFilter is optional CompletionsBodyContextFilter.
type OptCompletionsBodyContextFilter struct {
	Value CompletionsBodyContextFilter
	Set   bool
}

// IsSet returns true if OptCompletionsBodyContextFilter was set.
func (o OptCompletionsBodyContextFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompletionsBodyContextFilter) Reset() {
	var v CompletionsBodyContextFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompletionsBodyContextFilter) SetTo(v CompletionsBodyContextFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompletionsBodyContextFilter) Get() (v CompletionsBodyContextFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompletionsBodyContextFilter) Or(d CompletionsBodyContextFilter) CompletionsBodyContextFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompletionsBodySystemPrompt returns new OptCompletionsBodySystemPrompt with value set to v.
func NewOptCompletionsBodySystemPrompt(v CompletionsBodySystemPrompt) OptCompletionsBodySystemPrompt {
	return OptCompletionsBodySystemPrompt{
		Value: v,
		Set:   true,
	}
}

// OptCompletionsBodySystemPrompt is optional CompletionsBodySystemPrompt.
type OptCompletionsBodySystemPrompt struct {
	Value CompletionsBodySystemPrompt
	Set   bool
}

// IsSet returns true if OptCompletionsBodySystemPrompt was set.
func (o OptCompletionsBodySystemPrompt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompletionsBodySystemPrompt) Reset() {
	var v CompletionsBodySystemPrompt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompletionsBodySystemPrompt) SetTo(v CompletionsBodySystemPrompt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompletionsBodySystemPrompt) Get() (v CompletionsBodySystemPrompt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompletionsBodySystemPrompt) Or(d CompletionsBodySystemPrompt) CompletionsBodySystemPrompt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpenAIChoiceDelta returns new OptOpenAIChoiceDelta with value set to v.
func NewOptOpenAIChoiceDelta(v OpenAIChoiceDelta) OptOpenAIChoiceDelta {
	return OptOpenAIChoiceDelta{
		Value: v,
		Set:   true,
	}
}

// OptOpenAIChoiceDelta is optional OpenAIChoiceDelta.
type OptOpenAIChoiceDelta struct {
	Value OpenAIChoiceDelta
	Set   bool
}

// IsSet returns true if OptOpenAIChoiceDelta was set.
func (o OptOpenAIChoiceDelta) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpenAIChoiceDelta) Reset() {
	var v OpenAIChoiceDelta
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpenAIChoiceDelta) SetTo(v OpenAIChoiceDelta) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpenAIChoiceDelta) Get() (v OpenAIChoiceDelta, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpenAIChoiceDelta) Or(d OpenAIChoiceDelta) OpenAIChoiceDelta {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpenAIChoiceMessage returns new OptOpenAIChoiceMessage with value set to v.
func NewOptOpenAIChoiceMessage(v OpenAIChoiceMessage) OptOpenAIChoiceMessage {
	return OptOpenAIChoiceMessage{
		Value: v,
		Set:   true,
	}
}

// OptOpenAIChoiceMessage is optional OpenAIChoiceMessage.
type OptOpenAIChoiceMessage struct {
	Value OpenAIChoiceMessage
	Set   bool
}

// IsSet returns true if OptOpenAIChoiceMessage was set.
func (o OptOpenAIChoiceMessage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpenAIChoiceMessage) Reset() {
	var v OpenAIChoiceMessage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpenAIChoiceMessage) SetTo(v OpenAIChoiceMessage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpenAIChoiceMessage) Get() (v OpenAIChoiceMessage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpenAIChoiceMessage) Or(d OpenAIChoiceMessage) OpenAIChoiceMessage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpenAIChoiceSources returns new OptOpenAIChoiceSources with value set to v.
func NewOptOpenAIChoiceSources(v OpenAIChoiceSources) OptOpenAIChoiceSources {
	return OptOpenAIChoiceSources{
		Value: v,
		Set:   true,
	}
}

// OptOpenAIChoiceSources is optional OpenAIChoiceSources.
type OptOpenAIChoiceSources struct {
	Value OpenAIChoiceSources
	Set   bool
}

// IsSet returns true if OptOpenAIChoiceSources was set.
func (o OptOpenAIChoiceSources) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpenAIChoiceSources) Reset() {
	var v OpenAIChoiceSources
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpenAIChoiceSources) SetTo(v OpenAIChoiceSources) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpenAIChoiceSources) Get() (v OpenAIChoiceSources, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpenAIChoiceSources) Or(d OpenAIChoiceSources) OpenAIChoiceSources {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpenAICompletionObject returns new OptOpenAICompletionObject with value set to v.
func NewOptOpenAICompletionObject(v OpenAICompletionObject) OptOpenAICompletionObject {
	return OptOpenAICompletionObject{
		Value: v,
		Set:   true,
	}
}

// OptOpenAICompletionObject is optional OpenAICompletionObject.
type OptOpenAICompletionObject struct {
	Value OpenAICompletionObject
	Set   bool
}

// IsSet returns true if OptOpenAICompletionObject was set.
func (o OptOpenAICompletionObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpenAICompletionObject) Reset() {
	var v OpenAICompletionObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpenAICompletionObject) SetTo(v OpenAICompletionObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpenAICompletionObject) Get() (v OpenAICompletionObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpenAICompletionObject) Or(d OpenAICompletionObject) OpenAICompletionObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOpenAIMessageRole returns new OptOpenAIMessageRole with value set to v.
func NewOptOpenAIMessageRole(v OpenAIMessageRole) OptOpenAIMessageRole {
	return OptOpenAIMessageRole{
		Value: v,
		Set:   true,
	}
}

// OptOpenAIMessageRole is optional OpenAIMessageRole.
type OptOpenAIMessageRole struct {
	Value OpenAIMessageRole
	Set   bool
}

// IsSet returns true if OptOpenAIMessageRole was set.
func (o OptOpenAIMessageRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOpenAIMessageRole) Reset() {
	var v OpenAIMessageRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOpenAIMessageRole) SetTo(v OpenAIMessageRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOpenAIMessageRole) Get() (v OpenAIMessageRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOpenAIMessageRole) Or(d OpenAIMessageRole) OpenAIMessageRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ValidationError
type ValidationError struct {
	Loc  []ValidationErrorLocItem `json:"loc"`
	Msg  string                   `json:"msg"`
	Type string                   `json:"type"`
}

// GetLoc returns the value of Loc.
func (s *ValidationError) GetLoc() []ValidationErrorLocItem {
	return s.Loc
}

// GetMsg returns the value of Msg.
func (s *ValidationError) GetMsg() string {
	return s.Msg
}

// GetType returns the value of Type.
func (s *ValidationError) GetType() string {
	return s.Type
}

// SetLoc sets the value of Loc.
func (s *ValidationError) SetLoc(val []ValidationErrorLocItem) {
	s.Loc = val
}

// SetMsg sets the value of Msg.
func (s *ValidationError) SetMsg(val string) {
	s.Msg = val
}

// SetType sets the value of Type.
func (s *ValidationError) SetType(val string) {
	s.Type = val
}

// ValidationErrorLocItem represents sum type.
type ValidationErrorLocItem struct {
	Type   ValidationErrorLocItemType // switch on this field
	String string
	Int    int
}

// ValidationErrorLocItemType is oneOf type of ValidationErrorLocItem.
type ValidationErrorLocItemType string

// Possible values for ValidationErrorLocItemType.
const (
	StringValidationErrorLocItem ValidationErrorLocItemType = "string"
	IntValidationErrorLocItem    ValidationErrorLocItemType = "int"
)

// IsString reports whether ValidationErrorLocItem is string.
func (s ValidationErrorLocItem) IsString() bool { return s.Type == StringValidationErrorLocItem }

// IsInt reports whether ValidationErrorLocItem is int.
func (s ValidationErrorLocItem) IsInt() bool { return s.Type == IntValidationErrorLocItem }

// SetString sets ValidationErrorLocItem to string.
func (s *ValidationErrorLocItem) SetString(v string) {
	s.Type = StringValidationErrorLocItem
	s.String = v
}

// GetString returns string and true boolean if ValidationErrorLocItem is string.
func (s ValidationErrorLocItem) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringValidationErrorLocItem returns new ValidationErrorLocItem from string.
func NewStringValidationErrorLocItem(v string) ValidationErrorLocItem {
	var s ValidationErrorLocItem
	s.SetString(v)
	return s
}

// SetInt sets ValidationErrorLocItem to int.
func (s *ValidationErrorLocItem) SetInt(v int) {
	s.Type = IntValidationErrorLocItem
	s.Int = v
}

// GetInt returns int and true boolean if ValidationErrorLocItem is int.
func (s ValidationErrorLocItem) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntValidationErrorLocItem returns new ValidationErrorLocItem from int.
func NewIntValidationErrorLocItem(v int) ValidationErrorLocItem {
	var s ValidationErrorLocItem
	s.SetInt(v)
	return s
}
